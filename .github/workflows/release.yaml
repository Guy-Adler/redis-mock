name: Build and Release

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Pack npm package
        run: npm pack

      - name: Extract name and version from package.json
        id: get_info
        run: |
          NAME=$(jq -r .name package.json)
          VERSION=$(jq -r .version package.json)
          echo "PACKAGE_NAME=$NAME" >> $GITHUB_OUTPUT
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create .tgz with all dependencies
        env:
          PACKAGE_NAME: ${{ steps.get_info.outputs.PACKAGE_NAME }}
          PACKAGE_VERSION: ${{ steps.get_info.outputs.PACKAGE_VERSION }}
        run: |
          mkdir tmp
          cd tmp
          npm init -y
          npm i "../${PACKAGE_NAME}-${PACKAGE_VERSION}.tgz"
          rm ./node_modules/.package-lock.json
          echo "{ \"name\": \"${PACKAGE_NAME}\", \"version\": \"${PACKAGE_VERSION}\" }" > ./node_modules/packageInfo.json
          tar -czf ${PACKAGE_NAME}@${PACKAGE_VERSION}.tgz ./node_modules

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.3.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload custom .tgz to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./tmp/${{ steps.get_info.outputs.PACKAGE_NAME }}@${{ steps.get_info.outputs.PACKAGE_VERSION }}.tgz
          asset_name: ${{ steps.get_info.outputs.PACKAGE_NAME }}@${{ steps.get_info.outputs.PACKAGE_VERSION }}.tgz
          asset_content_type: application/gzip
